export function bruteForceTSP(values) {
    var cities = [];
    var totalCities = values.length / 2;

    function calculateTotalPermutations(totalCities) {
        var factorial = 1;
        for (var i = 1; i <= totalCities; i++) {
            factorial *= i;
        }
        return factorial;
    }

    function setup() {
        var order = [];
        var totalPermutations = calculateTotalPermutations(totalCities);
        var count = 0;
        var recordDistance;
        var bestEver;

        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;

        for (let i = 0; i < totalCities * 2; i += 2) {
            var x = values[i];
            var y = values[i + 1];
            cities[i / 2] = { x: x, y: y };
            order[i / 2] = i / 2;
            minX = Math.min(minX, x);
            maxX = Math.max(maxX, x);
            minY = Math.min(minY, y);
            maxY = Math.max(maxY, y);
        }

        for (let i = 0; i < totalCities * 2; i += 2) {
            var x = values[i] - minX + 50;
            var y = values[i + 1] - minY + 50;
            cities[i / 2] = { x: x, y: y };
        }

        var d = calcDistance(cities, order);
        recordDistance = d;
        bestEver = order.slice();

        function swap(a, i, j) {
            var temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }

        function calcDistance(points, order) {
            var sum = 0;
            for (var i = 0; i < order.length - 1; i++) {
                var cityAIndex = order[i];
                var cityA = points[cityAIndex];
                var cityBIndex = order[i + 1];
                var cityB = points[cityBIndex];
                var d = calculateEuclideanDistance(cityA.x, cityA.y, cityB.x, cityB.y);
                sum += d;
            }
            return sum;
        }

        function calculateEuclideanDistance(x1, y1, x2, y2) {
            x2 = x2 - minX + 50;
            x1 = x1 - minX + 50;
            y2 = y2 - minY + 50;
            y1 = y1 - minY + 50;

            let dx = x2 - x1;
            let dy = y2 - y1;
            return Math.sqrt(dx * dx + dy * dy);
        }

        function nextOrder() {
            count++;

            var largestI = -1;
            for (var i = 0; i < order.length - 1; i++) {
                if (order[i] < order[i + 1]) {
                    largestI = i;
                }
            }
            if (largestI === -1) {
                return {
                    totalDistance: recordDistance,
                    bestPath: bestEver.map(index => index - 1) // Subtract 1 from each index
                };
            }

            var largestJ = -1;
            for (var j = 0; j < order.length; j++) {
                if (order[largestI] < order[j]) {
                    largestJ = j;
                }
            }

            swap(order, largestI, largestJ);

            var endArray = order.splice(largestI + 1);
            endArray.reverse();
            order = order.concat(endArray);

            var d = calcDistance(cities, order);

            if (d < recordDistance) {
                recordDistance = d;
                bestEver = order.slice();
            }

            return false;  // Return `false` instead of `null`
        }

        var result;
        while (count < totalPermutations) {
            result = nextOrder();
            if (result) {
                break;
            }
        }

        return result;
    }

    return setup();
}